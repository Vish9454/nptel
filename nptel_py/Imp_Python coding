class sample(object):
    a=100
    def __init__(self):
        self.a=200
p=sample()
print(p.a)
print(sample.a)
    
'''
class Shape:
    def __init__(self):
        self.color=(255,0,255)

class Circle(Shape):
    circum=0
    def __init__(self,radius):
        Shape.__init__(self)
        self.radius =radius

    def area(self):
        return (self.radius * self.radius * 22/7)

    def circumfer(self):
        self.circum=self.radius*2*22/7
        return (self.circum)

circ=Circle(7)
print(circ.area())
print(circ.color)
print(circ.circumfer())

'''

'''
l=[0,3,[6,9]]
l2=l.copy()
l2[0]=8
print(l,l2)
'''
'''
str="Python Prog Lang"
print(str)
print(str.split())


def ge_txt(header="start"):
    yield header
    str="Python Prog Lang"
    if len(str):
        str2=str.split()
        for i in str2:
            yield i
        
gen=ge_txt()
for i in gen:
    print(i)
'''
'''
global q
def func():
    global  q
    q=40
    print(q)
    def intfun():
        global q
        q=60
        print('q=',q)
q=20
func()
print('q=',q)
'''
'''
dic1={'a':1,'b':0}
print(dic1.update({'b':1}))
'''

'''
def process(nos):
    return list(filter(lambda num:num%2,[i for i in range(nos)]))# ifmey enter hoga whn its 1
if __name__=="__main__":
    mynos=11
    o=process(mynos)
    print(o)


a=[i for i in range(1,6)]
try:
    if len(a):
        a.remove(a[-2])
        a.extend([6,7,8])
        a[2]="python"
except IndexError:
    print("indesx error")

print(len(a))




def process(nos):
    return list(map(lambda num:num**2 if num%2 else num ,nos))# ifmey enter hoga whn its 1
if __name__=="__main__":
    mynos=[1,2,3,4,5]
    o=process(mynos)
    print(o)

S="knln ldnvllnv lnddnv  lnnnv  llnln lqnlnlho"
print(S[::-1])

important
Str="lorem Txt"
print(Str.split()[:])

class Shape:
    def create(self):
        print("Shape class")
    def a(self):
        print("shape class a")
class Circle(Shape):
    def a(self):
        print("a circle class")
fun =Circle()
fun.create()
fun.a()
fun=Shape()
fun.create()
fun.a()
'''

'''
import threading
import os
def add(num1,num2):
    print(num1+num2)
def diff(num1,num2):
    print(num1-num2)
t1=threading.Thread(target=add,args=(10,24))
t2=threading.Thread(target=diff,args=(10,7))
t1.start()
print(threading.main_thread().name)
t2.start()
t1.join(10)
t2.join(5)
'''
'''
#very very important
def sum(list):
    if len(list)==1:
        if list[0]%2:
            return list[0]
        else:
            return 0
    else:
        if list[0]%2:
            return list[0]+sum(list[1:])
        else:
            return sum(list[1:])
print(sum([5,7,3,8,5,6]))
'''
'''
a=set()
b=set()

a={1,2,3,5,6,7,9,10}
b={1,3,5,7,9,11,13}

if len(a) and len(b):
    a.intersection_update(b)
else:
    b.intersection_update(a)
print(b)


import re
mystr="Hello World ,This is Python Programming Object Oriented Python"
print(re.findall(r'P.+n',mystr))
print(re.findall(r'P[a-z]*n',mystr))
for i in range(1):
    print(re.findall(r'0.+t\s',mystr))
    print(re.findall(r'0[a-zA-Z0-9]*d',mystr))


tup1=(12,45,67.6,34.34)
tup2=("a","b","c")
try:
    if len(tup1) and len(tup2) and tup1[3]:
        final=tup1+tup2
except IndexError:
    print("Index is out of range")
except TypeError:
    print("type erroe occured")
except:
    print("unable to concatinate")
else:
    print(final)
'''
